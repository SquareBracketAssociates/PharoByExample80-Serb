!!Razumevanje sintakse poruka
@chapterUnderstandingMessage
%stef did several passes

Iako je sintaksa poruka u Pharo-u ekstremno jednostavna, ona je nekonvencionalna i može zahtevati neko vreme za privikavanje na nju. 
Ovaj odeljak nudi neke smernice koje će vam pomoći da se priviknete na sintaksu za slanje poruka.
Ako se već osećate ugodno u vezi sa sintaksom, možete odlučiti da preskočite ovu glavu, ili da se na nju vratite kasnije.
Sintaksa Pharo-a je bliska Smalltalk-u, pa ona može biti bliska Smalltalk programerima.

!!!Identifikovanje poruka

U Pharo-u, izuzev sintaksnih elemenata navedenih u glavi *@chapterSyntaxNutshell* (\:= ^ . ; # () {} [ : | ]), sve je slanje poruke.
Moguće je definisati operatore kao što su ==\+== za svoje klase, ali svi operatori imaju isti prioritet.
Pored toga, nije moguće promeniti arnost metoda. "-" je uvek binarna poruka; ne postoji način da dobijemo unarni "==\-=="  različitim "overloading"-om.

U Pharo-u, redosled u kome se poruke salju određen je ''vrstom'' poruke.
Postoje tri vrste poruka: ''unarne'', ''binarne'', i ''poruke sa ključnim rečima''.
Unarne poruke se prve šalju, zatim binarne poruke i na kraju poruke sa ključnim rečima.
Kao i u većini jezika, zagrade se koriste za promenu redosleda izvršavanja.
Ova pravila čine Pharo kod što je moguće jednostavnijim za čitanje, dok u većini slučajeva nije potrebno razmišljati o pravilima.

Kako se u Pharo-u sva izračunavanja obavljaju prosleđivanjem poruka, ispravno razumevanje poruka je krucijalno.
Sledeća terminologija će nam pomoći:

-Poruka se sastoji od ""selektora"" ("eng. selector") poruke i, opciono, iz argumenata.
-Poruka se šalje ""primaocu"" ("eng. receiver").
-Kombinacije poruke i njenog primaoca  se zove ''slanje poruke'' (eng. a message send) kao što je prikazano na slici *@fig:firstScriptMessage*.

+Dve slanja poruke koja se sastoje od primaoca, selektora metoda, i skupa argumenata.>file://figures/message.png|label=fig:firstScriptMessage|width=65+

Poruka se uvek šalje primaocu, koji može biti jedan literal, blok, promenljiva, ili rezultat evaluacije druge poruke.
Da bismo vam pomogli da prepoznate primaoca poruke, mi ćemo ga podvući za vas. Takođe ćemo zaokružiti svako slanje poruke elipsom i numerisati slanja poruka počevši od prve koja će biti poslata da vam pomognemo da uočite redosled u kom su poruke poslate.

+Dve poruke: ==Color yellow== i ==aMorph color: Color yellow==.>/figures/uKeyUnOne.png|label=fig:ellipse|width=50+

Slika *@fig:ellipse* prikazuje dva slanja poruke, ==Color yellow== i ==aMorph color: Color yellow==, zbog toga imamo dve elipse. Slanje poruke ==Color yellow== se izvršava prvo te je stoga njegova elipsa numerisana sa ==1==.  Postoje dva primaoca: ==aMorph== koji prima poruku ==color: ...== i ==Color== koji prima poruku ==yellow==. Oba primaoca su podvučena.

Primaoc može biti prvi element poruke kao što je ==100== u slanju poruke ==100 + 200== ili ==Color== u slanju poruke ==Color yellow==. Pored toga, primaoc može biti rezultat slanja druge poruke. Na primer, u slanju poruke ==Pen new go: 100==, primaoc poruke ==go: 100== je objekat koji vraća poslata poruka ==Pen new==. U svakom slučaju, poruka se šalje objektu koji se zove ''primaoc'' koji može biti rezultat slanja druge poruke.

|!Slanje poruke |!Tip poruke |!Rezultat
|==Color yellow== | unarna | daje žutu boju .
|==aPen  go: 100== | sa ključnim rečima | pomera olovku napred
|					|					| za 100 piksela.
|==100 + 20== | binarna |  100 se uvećava za 20
|==Browser open== | unarna | otvara se novi brauzer.
|==Pen new  go: 100== | unarna i |kreira olovku i pomera je 
|					 | sa ključnim rečima | napred za 100 piksela.
|==aPen go: 100 + 20== | sa ključnim rečima | pomera olovku napred 
|					 | i binarna | za 120 piksela.


Tabela prikazuje nekoliko primera slanja poruka. Treba primetiti nekoliko činjenica:
- Nemaju sve poslate poruke argumente. Unarne poruke kao što je ==open== nemaju argumente.
- Poruke koje imaju jednu ključnu reč i binarne poruke kao što su ==go: 100== i ==+ 20== svaka imaju po jedan argument.
- Šalju se pojedinačne i složene poruke. ==Color yellow== i ==100 + 20== su pojedinačne:  poruka se šalje objektu, dok slanje poruke ==aPen go: 100 + 20== komponuje dve poruke: ==+ 20== se šalje objektu ==100==, a ==go:== se šalje objektu ==aPen== sa argumentom koji je rezultat prve poslate poruke. 
- Primalac može biti izraz koji vraća objekat kao što su dodela, slanje poruke ili literal. U ==Pen new go: 100==, poruka ==go: 100== je poslata objektu koji je rezultat izvršavanja poslate poruke ==Pen new==.

!!!Tri vrste poruka

Pharo definiše nekoliko jendostavnih pravila za određivanje redosleda u kom se šalju poruke.
Ova pravila su zasnovana na pravljenju razlike između tri različite vrste poruka:
-''Unarne poruke'' su poruke koje se šalju objektu bez ikakvih dodatnih informacija u vidu argumenata. Na primer, u  ==3 factorial==, ==factorial== je unarna poruka. Poslate unarne poruke mogu izvršavati osnovne unarne operacije ili proizvoljne funkcionalnosti, ali uvek zadovoljavaju kriterijum da se šalju bez argumenata.
-''Binarne poruke'' su poruke koje predstavljaju osnovne binarne operacije (često aritmetičke).
One su binarne jer uvek obuhvataju tačno dva objekta: primaoca i objekat koji je argument. Na primer u  ==10 + 20==, ==+== je binarna poruka poslata primaocu ==10== sa argumentom ==20==.
-''Poruke sa ključnim rečima'' su poruke koje se sastoje od jedne ili više ključnih reči, od kojih se svaka završava dvotačkom (==:==) i uzima jedan argument. NA primer u ==anArray at: 1 put: 10==, ključna reč ==at:== uzima argument ==1==, a ključna reč ==put:== uzima argument ==10==.

Bitno je uočiti sledeće:
- Ne postoje poruke sa ključnim rečima koje se šalju bez argumenata. Sve poruke koje se šalju bez argumenata su unarne poruke.
- Postoji razlika između poruka sa ključnim rečima koje se šalju sa tačno jednim argumentom i binarnih poruka - poslata poruka sa ključnim rečima može izvršiti proizvoljnu funkcionalnost.


!!!!Unarne poruke

Unarne poruke su poruke koje ne zahtevaju ni jedan argument.
One prate sintaksni obrazac: ==primaoc imePoruke==.
Selektor je sastavljen jednostavno od niza karaktera koji ne sadrže ==:== (na primer, ==factorial==, ==open==, ==class==).

[[[example=true
89 sin
>>> 0.860069405812453
]]]

[[[example=true
3 sqrt
>>> 1.732050807568877
]]]

[[[example=true
Float pi
>>> 3.141592653589793
]]]

[[[example=true
'blop' size
>>> 4
]]]

[[[example=true
true not
>>> false
]]]

[[[example=true
Object class 
>>> Object class  "Klasa objekta Object je Object class (BENG)"
]]]

@@vazno Unarne poruke prate sintaksni obrazac: primaoc ""selektor"".

!!!!Binarne poruke

Binarne poruke su poruke koje zahtevaju tačno jedan argument ''i'' i čiji se selektor sastoji od niza jednog ili više karaktera iz sledećeg skupa: ==\+==, ==\-==, ==\*==, ==\/==, ==\&==, ==\===, ==\>==, ==\|==, ==\<==, ==\~==, i ==\@==.
Napominjemo da ==\-\-== nij edozvoljeno iz razloga koji su u vezi sa parsiranjem.

[[[example=true
100@100
>>> 100@100  "kreira Point objekat"
]]]

[[[example=true
3 + 4
>>> 7
]]]

[[[example=true
10 - 1
>>> 9
]]]

[[[example=true
4 <= 3
>>> false
]]]

[[[example=true
(4/3) * 3 == 4  
>>> true  "jednakost je samo binarna poruka, a razlomci su autentični"
]]]

[[[example=true
(3/4) == (3/4) 
>>> false  "dva jednaka razlomka nisu isti objekat"
]]]

@@vazno Binarne poruke prate sintaksni obrazac: primaoc ""selektor"" argument.

!!!!Poruke sa ključnim rečima

Poruke sa ključnim rečima su poruke koje zahtevaju jadan ili više argumenata i čiji se selektor sastoji od jedne ili više ključnih reči od kojih se svaka završava sa  ==\:==.

U primeru koji sledi, poruka ==between:and:== je sastavljena od dve ključne reči: ==between:== i ==and:==. Kompletna poruka ==between:and:== se šalje broju.

[[[example=true
2 between: 0 and: 10
>>> true
]]]

Svaka ključna reč uzima jedan argument. Stoga, ==r:g:b:== je poruka sa tri argumenta, ==playFileNamed:== i ==at:== su poruke sa jednim argumentom, a ==at:put:== je poruka sa dva argumenta. Za kreiranje instance klase ==Color== može se poslati poruka ==r:g:b:== kao u slanju poruke ==Color r: 1 g: 0 b: 0==, koje kreira crvenu boju. Važno je uočiti da su dvotačke deo selektora.

[[[example=true
Color r: 1 g: 0 b: 0
>>> Color red  "kreira novu boju"
]]]


U konvencionalnoj sintaksi, slanje poruke ==Color r: 1 g: 0 b: 0== u Pharo-u  odgovaralo bi pozivu metoda zapisanom kao ==Color.rgb(1,0,0)==.

[[[example=true
1 to: 10
>>> (1 to: 10)  "kreira interval"
]]]


[[[example=true
| nums |
nums := Array newFrom: (1 to: 5).
nums at: 1 put: 6.
nums
>>> #(6 2 3 4 5)
]]]

@@vazno Poruke sa ključnim rečima prate sintaksni obrazac: 
primaoc ""selektorReč1:"" argument1 ""Reč2:"" argument2 ... ""RečN:"" argumentN

!!!Komponovanje poruka

Svaka od tri vrste poruka ima razi;it prioritet, što omogućava da se poruke komponuju na elegantan način.
- Unarne poruke se uvek prve šalju, zatim binarne i konačno poruke sa ključnim rečima.
- Poruke u zagradama imaju prioritet u odnosu na sve druge poruke.
- Poruke iste vrste i preioriteta se izračunavaju s leva na desno.

Ova pravila dovode do veoma prirodnog redosleda čitanja.
Ako želite da budete sigurni da će vaše poruke biti poslate u redosledu koji vi želite, uvek možete dodati zagradekao što je prikazano na slici *@fig:uKeyUn*.
Na slici, poruka ==yellow== je unarna poruka, a poruka ==color:== je poruka s aključnim rečima, zato se prvo šalje poruka ==Color yellow==.
Pored toga, kako se poruke u zagradama šalju prve, dodavanjem (nepotrebnih) zagrada oko ==Color yellow== samo ističe da će se ovo slanje poruke prvo dogoditi.
Ostatak sekcije ilustruje ove navode.

+Unarna poruka ==Color yellow== se prva šalje. Ovo vraća color objekat koji se, kao argument, prosleđuje poruci aPen color:.>/figures/uKeyUn.png|label=fig:uKeyUn+


!!!!Unarne poruke > Binarne poruke > Poruke sa ključnim rečima

Unarne poruke imaju viši prioritet od ostalih vrsta poruka. Tako, unarne poruke se uvek prve šalju, zatim binarne i konačno poruke sa ključnim rečima. 

@@vazno ==Unarne poruke > Binarne poruke > Poruke sa ključnim rečima==

Kao što naredni primeri pokazuju, pravila sintakse Pharo-a uopšteno obezbedjuju da se slanje poruka može čitati na prirodan način:
[[[example=true
1000 factorial / 999 factorial 
>>> 1000
]]]

[[[example=true
2 raisedTo: 1 + 3 factorial
>>> 128
]]]


Nažalost, ova pravila su previše jednostavna za slanje aritmetičkih poruka, pa je neophodno uvesti zagrade kad god je potrebno nametnuti prioritet za binarne operatore.
[[[example=true
1 + 2 * 3
>>> 9
]]]

[[[example=true
1 + (2 * 3)
>>> 7
]]]
Aritmetičkim nedoslednostima ćemo posvetiti posebnu sekciju.

Naredni primer, koji je nešto složeniji (!), pruža lepu ilustraciju da se čak i komplikovani izrazi  mogu čitati na prirodan način.

[[[
[:aClass | aClass methodDict keys select: [:aMethod | (aClass>>aMethod) isAbstract ]] value: Boolean 
>>> an IdentitySet(#or: #| #and: #& #ifTrue: #ifTrue:ifFalse: #ifFalse: #not #ifFalse:ifTrue:)
]]]

Ovde želimo da znamo koji metodi klase ==Boolean== su apstraktni.
@@todo fusnota? 
Zapravo, mogli smo ovo napisati ekvivalentnim ali jednostavnijim izrazom: ==Boolean methodDict select: #isAbstract thenCollect: #selector==. 
Pitamo neku klasu u argumentu, ==aClass==, za ključeve iz njenog rečnika metoda, i selektujemo metode date klase koji su apstraktni. 
Zatim vezujemo argument ==aClass== za konkretnu vrednost ==Boolean==. 
Zagrade su nam potrebne samo za slanje binarne poruke ==\>\>==, koja selektuje metode klase, pre slanja unarne poruke ==isAbstract== metodu. Rezultat nam pokazuje koji metodi moraju biti implementirani u konkretnim klasama ==True== i ==False== koje su podklase klase ==Boolean==.

!!!!!!Primer.

U slanju poruke ==aPen color: Color yellow==, imamo jednu ''unarnu'' poruku ==yellow== poslatu klasi ==Color== i jednu ''poruku sa ključnim rečima'' ==color:== poslatu objektu ==aPen==.
Unarne poruke se šalju prve pa s eprvo šalje ==Color yellow== (1).
Ovo vraća objekat color koji se prosleđuje kao argument poruke u ==aPen color: aColor== (2).
Slika *@fig:uKeyUn* prikazuje grafički kako se poruke šalju.

[[[ Dekomponovanje izvršavanja slanja poruke aPen color: Color yellow
		aPen color: Color yellow
(1)         Color yellow         "unarne poruke se se šalju prve"
               >>> aColor
(2)         aPen color: aColor   "poruka sa ključnim rečima se šalje sledeća"
]]]

!!!!!!Primer.
 U slanju poruke ==aPen go: 100 + 20==, imamo ''binarnu'' poruku ==\+ 20== i 'poruku sa ključnim rečima''  ==go:==. Binarne poruke se šalju pre poruka s aključnim rečima te je ==100 + 20== poslato prvo (1): poruka ==\+ 20== je poslata objektu ==100== što vraća ==120==. Zatim se šalje poruka ==aPen go: 120== sa argumentom ==120== (2). Naredni primer prikazuje redosled izvršavanja ovog slanja poruke.

[[[ Dekomponovanje izvršavanja slanja poruke aPen go: 100 + 20
		aPen go: 100 + 20
(1)         100 + 20         "prvo binarna poruka"
               >>>   120
(2)     aPen go: 120         "zatim poruka sa ključnim rečima"

]]]


+Binarne poruke se šalju pre poruka sa ključnim rečima>file://figures/uKeyBin.png|label=fig:uKeyBin|width=35+

+Dekomponovanje izvršavanja Pen new go: 100 \+ 20>file://figures/uunKeyBin.png|label=fig:uunKeyBin|width=40+


!!!!!!Primer.
 Ostavljamo vam,  kao vežbu, da dekomponujete  izvršavanje slanja poruke ==Pen new go: 100 + 20== koja je komponovana od jedne unarne, jedne binarne i jedne poruke sa ključnim rečima (see Figure *@fig:uunKeyBin*).


!!!!Zagrade prvo
Poruke u zagradama se šalju pre drugih poruka.

@@vazno (Slanje poruke) > unarna > binarna > sa kljčnim rečima

Slede neki primeri. 

Prvi primer prikazuje da zagrade nisu potrebne kada je redosled onakakv kakav mi želimo, tj. da je rezultat isti kada ovo zapišemo sa i bez zagrada.
Ovde računamo tangens od 1.5, zatim ga zaokružujemo i konvertujemo u string.

[[[example=true
1.5 tan rounded asString = (((1.5 tan) rounded) asString) 
>>> true
]]]

Drugi primer prikazuje da se ==factorial== šalje pre sabiranja i ako želimo da se prvo saberu 3 i 4 treba da koristimo zagrade kao što je prikazano ispod.
[[[example=true
3 + 4 factorial
>>> 27    "(ne 5040)"
]]]

[[[example=true
(3 + 4) factorial
>>> 5040
]]]

Slično, u narednom primeru su nam potrebne zagrade da bismo postigli slanje poruke ==lowMajorScaleOn:== pre ==play==.

[[[
(FMSound lowMajorScaleOn: FMSound clarinet) play
"(1) šaljemo poruku clarinet klasi FMSound da kreira zvuk klarineta.
 (2) šaljemo ovaj zvuk, objekat klase FMSound, kao argument poruke lowMajorScaleOn:.
 (3) oglašava se rezultujući zvuk."
]]]

!!!!!!Primer.
Slanje poruke ==(65@325 extent: 134@100) center== vraća centar pravougaonika čije se gornje levo teme nalazi u tački (65, 325) a čije su dimenzije 134*100. Primer koji sledi pokazuje kako se poruke dekomponuju i šalju. Prvo se šalje poruka u zagradama. Ovde su sadržane dve binarne poruke, ==65@325== i ==134@100==, koje se šalju prve i vraćaju takče (eng.  points), i poruka sa ključnim rečima ==extent:== koja se zatim šalje i vraća pravougaonik. Konačno, unarna poruka ==center== pravougaoniku i ona vraća tačku. Evaluacija ove poruke bez zagrada bi dovela do greške jer objekat ==100== ne razume poruku ==center==.

[[[
Primer sa zagradama.
      (65@325 extent: 134@100) center
(1)   65@325                        "binarna"
      >>> aPoint
(2)   134@100                       "binarna"
      >>> anotherPoint
(3)   aPoint extent: anotherPoint   "sa ključnim rečima"
      >>> aRectangle
(4)   aRectangle center             "unarna"
      >>> 132@375
]]]

!!!!Sleva nadesno
Sada znamo kako se rukuje porukama različitih vrsta i prioriteta. Poslednje pitanje na koje treba da odgovorimo je kako se šalju poruke istog prioriteta. One se šalju sleva nadesno. Primetimo da ste već videli ovo ponašanje u primeru == 1.5 tan rounded asString == gde su sve unarne poruke poslate redom sleva nadesno što je ekvivalentno sa ==(((1.5 tan) rounded) asString)==.

@@vazno Kada su poruke iste vrste, redosled izvršavanja je sleva nadesno.

!!!!!!Primer.
U slanju poruke ==Pen new down== sve poruke su unarne, pa se najlevlja ==Pen new==, salje prva. Ovo vraća novokreirani objekat klase Pen kom se šalje poruka ==down==, kao što je prikazano na slici *@fig:unaryMessages*.

+Dekomponovanje Pen new down.>file://figures/ucompoUn.png|label=fig:unaryMessages|width=60+

!!!!Arithmetičke nedoslednosti
Pravila za komonovanje poruka su jednostavna ali ona rezultuju nedoslednostima za izračunavanje aritmetičkih operacija koje se izvršavaju u vidu poslatij binarnih poruka.
Slede neke uobičajene situacije u kojima su zagrade neophodne.


[[[
3 + 4 * 5
>>> 35    "(ne 23)  Binarne poruke su poslate sleva nadesno"
]]]

[[[example=true
3 + (4 * 5)
>>> 23
]]]

[[[example=true
1 + 1/3
>>> (2/3)    "ne 4/3"
]]]

[[[example=true
1 + (1/3)
>>> (4/3)
]]]

[[[example=true
1/3 + 2/3       
>>> (7/9)    "ne 1"
]]]

[[[example=true
(1/3) + (2/3)
>>> 1
]]]

!!!!!!Primer.
U slanjima poruka ==20 \+ 2 \* 5==, imamo samo binarne poruke ==\+== i ==\*==. Pored toga, u Pharo-u ne postoji specifičan prioritet za operacije ==\+== i ==\*==. One su samo binarne poruke i stoga ==\*== nema prioritet nad ==\+==. Ovde se najlevlja poruka ==\+== šalje prva (1) nakon čega se ==\*== rezultatu kao što je prikazano ispod.

[[[
Dekomponovanje 20 + 2 * 5
"Kako ne postoji prioritet medju binarnim porukama, najlevlja poruka + se izračunava prva iako po pravilima aritmetike * treba biti poslato prvo."

     20 + 2 * 5
(1)  20 + 2 >>> 22
(2)  22     * 5 >>> 110

]]]

+Uobičajeni redosled izračunavanja.>file://figures/ucompoNoBracketPar.png|width=55+


Kao što je prikazano prethodnimm primerom rezultat izračunavanja je ==30==, a ne ==110==. Ovaj rezultat je možda neočekivana, ali direktno prati pravila za slanje poruka. Ovo je cena koja se plaća za jednostavnost modela. Da bismo dobili ispravan rezultat, treba d akoristimo zagrade. Kada su poruke okružene zagradama one se izračunavaju prve. Stoga slanje poruke ==20 \+ (2 \* 5)== vraća rezultat 30 kao što je prikazano.

[[[
Dekomponovanje 20 + (2 * 5)
"Poruka u zagradama se izračunava prva i stoga je * poslata pre + što dovodi do ispravnog ponašanja."

    20 + (2 * 5)
(1)      (2 * 5) >>> 10
(2) 20 + 10      >>> 30
]]]


+Promena uobičajenog redosleda izvračunavanja upotrebom zagrada.>file://figures/ucompoNumberBracket.png|width=55+

@@vazno U Pharo-u, aritmetičke operacije kao što su ==\+== i ==\*== nemaju različit prioritet. ==\+== i ==\*== su samo binarne poruke i stoga ==\*== nema prioritet nad ==\+==. Korititi zagrade za dobijanje željenog rezultata.

+Ekvivalentne poruke upotrebom zagrada.>file://figures/uKeyUnBinPar.png|width=80+

+Ekvivalentne poruke upotrebom zagrada.>file://figures/uunKeyBinPar.png|width=80+

%%%${table:label=value|caption=Slanja poruka i njihovi ekvivalentni sa kompletnim zagradama}$
|!Implicitni prioritet |!Explicitni prioritet definisan zagradama
|aPen color: Color yellow | aPen color: (Color yellow)
| aPen go: 100 \+ 20= | Pen go: (100 \+ 20)
| aPen penSize: aPen penSize \+ 2 | aPen penSize: ((aPen penSize) \+ 2)
| 2 factorial \+ 4 | (2 factorial) \+ 4

Primetimo da se prvim pravilom koje ističe da se unarne poruke šalju pre binarnih, a binarne pre poruka s aključnim rečima izbegava potreba za eksplicitnim navođenjem zagrada oko njih. Tabela iznad prikazuje slanja poruka zapisana poštujući ova pravila i ekvivalentna slanja poruka zapisana kao da ova pravila ne postoje. Oba slanja svake poruke zapisana na dva načina imaju isti rezultat i vraćaju istu vrednost.

!!!Smernice za prepoznavanje poruka sa ključnim rečima

Često početnici imaju problem da razumeju kada treba dodati zagrade.
Hajde da pogledamo kako su poruke organizovanje od strane kompajlera.

!!!!Zagrade ili ne?

Karakteri \[, \], \( i \) razgraničavaju različite oblasti. Unutar takvih oblasti, slanje poruke sa ključnim rečima je najduža sekvenca reči koje se završavaju sa ==\:== koja nije presečena znakovima ==\.==  ili ==\;==. Kada karakteri ==\[== i  ==\]== ili ==\(== i ==\)== okružuju reči sa dvotačkama, ove reči učestvuju u slanju poruke sa ključnim rečima koje je ''lokalno'' za definisanu oblast.

U sledećem primeru, imamo dve poslate poruke sa ključnim rečima:  ==rotatedBy:magnify:smoothing:== i ==at:put:==.

[[[
aDict
   at: (rotatingForm
          rotateBy: angle
          magnify: 2
          smoothing: 1)
   put: 3
]]]

!!!!!!Smernice
Ako imate problema sa pravilima prioriteta, možete početi jednostavno dodajući zagrade kad god želite da odvojite dve poruke koje imaju isti prioritet.

Naredni fragment koda ne zahteva zagrade jer slanje unarne poruke  ==x isNil== ima prioritet u odnosuu na slanje poruke sa ključnim rečima ==ifTrue:==.
[[[
(x isNil)
   ifTrue:[...]
]]]

Naredni fragment koda zahteva zagrade jer su poruke ==includes:== i ==ifTrue:== obe poruke sa ključnim rečima.
[[[
ord := OrderedCollection new.
(ord includes: $a)
   ifTrue:[...]
]]]

Bez zagrada, nepoznata poruka ==includes:ifTrue:== bi bila poslata kolekciji ==ord==!

!!!!Kada koristiti \[ \] ili \( \)

Možete takođe naići na problem da razumete kada se koriste uglaste zagrade, a ne okrugle.
Osnovni princip je da treba koristiti ==\[\]== kada znamo koliko puta, potencijalno nula, neki izraz treba biti evaluiran.
==\[expression\]== ovo će kreirati zatvaranje bloka (''tj.'', objekat) od ==expression==, koji može biti evaluiran bilo koji broj puta (moguće i 0), u zavisnosti od konteksta.
Uočimo da izraz može biti slanje poruke, promenljiva, literal, dodela ili blok.

Zbog ovoga, uslovno granjanja ==ifTrue:== ili ==ifTrue:ifFalse:== zahtevaju blokove.
Prateći isti princip i primaoc i argument poruke ==whileTrue:== zahtevaju upotrebu uglastih zagrada jer ne znamo koliko puta svaki od njih treba da bude evaluiran.

Okrugle zagrade, s druge strane, utiču samo na redosled slanja poruka.
Dakle u ==(expression)==, izraz ==expression== će se ''uvek'' izračunati tačno jednom.

[[[
[ x isReady ] whileTrue: [ y doSomething ]  "i primaoc i argument moraju biti blokovi"
4 timesRepeat: [ Beeper beep ]              "argument se izračunava više od jednom, stoga mora biti blok"
(x isReady) ifTrue: [ y doSomething ]       "primaoc se izračunava samo jednom, stoga nije blok		
											argument ne mora da se izvrši ni jednom, te je stoga blok"				  
]]]

!!!Sekvenca izraza

Izrazi (''tj.'', slanja poruka, dodele, ...) odvojeni tačkom se evaluiraju u sekvenci. Primetimo d anema tačke između deklaracije promenljive i narednog izraza.
Vrednost sekvence je vrednost koja se dobija evaluacijom poslednjeg izraza u sekvenci.
Vrednosti koje vraćaju svi izrazi izuzev poslednjeg se ignorišu na kraju. 
Primetimo da je tačka separator, a ne završni simbol. Zato je poslednja tačka opciona.

[[[
| box |
box := 20@30 corner: 60@90.
box containsPoint: 40@50 
>>> true
]]]

!!!Kaskadne poruke

Pharo nudi način za slanje više poruka istom primaocu bez njegovog višestrukog navođenja upotrebom (==\;==) separatora.
Ovo se zove kaskada u Pharo žargonu.

Sintaksno, kaskada se predstvlja na sledeći način:

[[[
anReceiverExpression msg1 ; msg2 ; msg3
]]]

!!!!!!Primer. 
Možete programirati u Pharo-u bez upotrebe kaskada. To će vas samo primorati da ponavljate priomaoca poruka.
Sledeći fragmeti koda su ekvivalentni:
[[[
Transcript show: 'Pharo is '.
Transcript show: 'fun '.
Transcript cr.
]]]

[[[
Transcript
   show: 'Pharo is';
   show: 'fun ';
   cr
]]]

Zapravo, primaoc svih poruka u kaskadi je primaoc prve poruke.
Primetimo da objekat koji prima kaskadne poruke može i sam biti rezultat slanja poruke.
U narednom primeru, prva poruka je ==setX:setY== dok iza nje sledi kaskada.
Primaoc kaskadne poruke ==setX:setY:== je novokreirana tačka koja je rezultat izvršavanja ==Point new==, a ''ne'' ==Point==.
Predstojeća poruka ==isZero== se šalje istom primaocu.

[[[example=true
Point new setX: 25 setY: 35; isZero
>>> false
]]]

!!!Sažetak glave

- Poruka se ovek šalje objektu koji se zove ''primaoc'', a koji može biti rezultat slanja druge poruke.
- Unarne poruke su poruke koje ne zahtevaju argumente. One su oblika: selektor.
- Binarne poruke su poruke koje uključuju dva objekta, primaoca i drugi objekat, ''i'' čiji selektor se satoji od jednog ili više karaktera sa sledeće liste: ==\+==, ==\-==, ==\*==, ==\/==, ==\|==, ==\&==, ==\===, ==\>==, ==\<==, ==\~==, and ==\@==. One su oblika: primaoc ""selektor"" argument
- Poruke sa ključnim rečima su poruke koje uključuju više od jednog objekta i koje sadrže najmanje jednu dvotačku (==\:==). One su oblika: primaoc ""selektorKljučnaReč1:"" argument1 ""KljučnaReč2:"" argument2 ... ""KljučnaRečN:"" argumentN
-""Pravilo 1."" Unarne poruke se šalju prve, zatim binarne poruke, i na kraju poruke sa ključnim rečima.
-""Pravilo 2."" Poruke u zagradama se šalju pre svih drugih poruka.
-""Pravilo 3."" Kada su poruke iste vrste (i prioriteta), redosled izvršavanja je sleva nadesno.
- U Pharo-u, tradicionalni aritmetički operatori kao što su \+ i \* imaju jednak prioritet. ==\+== i ==\*== su samo binarne poruke i stoga ==\*== nema prioritet nad ==\+==. Morate koristiti zagrade da biste postigli ispravan rezultat.
