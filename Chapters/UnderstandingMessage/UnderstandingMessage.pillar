!!Razumevanje sintakse poruka
@chapterUnderstandingMessage
%stef did several passes

Iako je sintaksa poruka u Pharo-u ekstremno jednostavna, ona je nekonvencionalna i može zahtevati neko vreme za privikavanje na nju. 
Ovaj odeljak nudi neke smernice koje će vam pomoći da se priviknete na sintaksu za slanje poruka.
Ako se već osećate ugodno u vezi sa sintaksom, možete odlučiti da preskočite ovaj odeljak, ili da se na njega vratite kasnije.
Sintaksa Pharo-a je bliska Smalltalk-u, pa ona može biti bliska Smalltalk programerima.

!!!Identifikovanje poruka

U Pharo-u, izuzev sintaksnih elemenata navedenih u Odeljku *@chapterSyntaxNutshell* (\:= ^ . ; # () {} [ : | ]), sve je slanje poruke.
Moguće je definisati operatore kao što su ==\+== za svoje klase, ali svi operatori imaju isti prioritet.
Pored toga, nije moguće promeniti arnost metoda. "-" je uvek binarna poruka; ne postoji način da dobijemo unarni "==\-=="  različitim "overloading"-om.

U Pharo-u, redosled u kome se poruke salju određen je ''vrstom'' poruke.
Postoje tri vrste poruka: ''unarne'', ''binarne'', i ''poruke sa ključnim rečima''.
Unarne poruke se prve šalju, zatim binarne poruke i na kraju poruke sa ključnim rečima.
Kao i u većini jezika, zagrade se koriste za promenu redosleda izvršavanja.
Ova pravila čine Pharo kod što je moguće jednostavnijim za čitanje, dok u većini slučajeva nije potrebno razmišljati o pravilima.

Kako se u Pharo-u sva izračunavanja obavljaju prosleđivanjem poruka, ispravno razumevanje poruka je krucijalno.
Sledeća terminologija će nam pomoći:

-Poruka se sastoji od ""selektora"" ("eng. selector") poruke i, opciono, iz argumenata.
-Poruka se šalje ""primaocu"" ("eng. receiver").
-Kombinacije poruke i njenog primaoca  se zove ''slanje poruke'' (eng. a message send) kao što je prikazano na slici *@fig:firstScriptMessage*.

+Dve slanja poruke koja se sastoje od primaoca, selektora metoda, i skupa argumenata.>file://figures/message.png|label=fig:firstScriptMessage|width=65+

Poruka se uvek šalje primaocu, koji može biti jedan literal, blok, promenljiva, ili rezultat evaluacije druge poruke.
Da bismo vam pomogli da prepoznate primaoca poruke, mi ćemo ga podvući za vas. Takođe ćemo zaokružiti svako slanje poruke elipsom i numerisati slanja poruka počevši od prve koja će biti poslata da vam pomognemo da uočite redosled u kom su poruke poslate.

+Dve poruke: ==Color yellow== i ==aMorph color: Color yellow==.>/figures/uKeyUnOne.png|label=fig:ellipse|width=50+

Slika *@fig:ellipse* prikazuje dva slanja poruke, ==Color yellow== i ==aMorph color: Color yellow==, zbog toga imamo dve elipse. Slanje poruke ==Color yellow== se izvršava prvo te je stoga njegova elipsa numerisana sa ==1==.  Postoje dva primaoca: ==aMorph== koji prima poruku ==color: ...== i ==Color== koji prima poruku ==yellow==. Oba primaoca su podvučena.

Primaoc može biti prvi element poruke kao što je ==100== u slanju poruke ==100 + 200== ili ==Color== u slanju poruke ==Color yellow==. Pored toga, primaoc može biti rezultat slanja druge poruke. Na primer, u slanju poruke ==Pen new go: 100==, primaoc poruke ==go: 100== je objekat koji vraća poslata poruka ==Pen new==. U svakom slučaju, poruka se šalje objektu koji se zove ''primaoc'' koji može biti rezultat slanja druge poruke.

|!Slanje poruke |!Tip poruke |!Rezultat
|==Color yellow== | unarna | daje žutu boju .
|==aPen  go: 100== | sa ključnim rečima | pomera olovku napred
|					|					| za 100 piksela.
|==100 + 20== | binarna |  100 se uvećava za 20
|==Browser open== | unarna | otvara se novi brauzer.
|==Pen new  go: 100== | unarna i |kreira olovku i pomera je 
|					 | sa ključnim rečima | napred za 100 piksela.
|==aPen go: 100 + 20== | sa ključnim rečima | pomera olovku napred 
|					 | i binarna | za 120 piksela.


Tabela prikazuje nekoliko primera slanja poruka. Treba primetiti nekoliko činjenica:
- Nemaju sve poslate poruke argumente. Unarne poruke kao što je ==open== nemaju argumente.
- Poruke koje imaju jednu ključnu reč i binarne poruke kao što su ==go: 100== i ==+ 20== svaka imaju po jedan argument.
- Šalju se pojedinačne i složene poruke. ==Color yellow== i ==100 + 20== su pojedinačne:  poruka se šalje objektu, dok slanje poruke ==aPen go: 100 + 20== komponuje dve poruke: ==+ 20== se šalje objektu ==100==, a ==go:== se šalje objektu ==aPen== sa argumentom koji je rezultat prve poslate poruke. 
- Primalac može biti izraz koji vraća objekat kao što su dodela, slanje poruke ili literal. U ==Pen new go: 100==, poruka ==go: 100== je poslata objektu koji je rezultat izvršavanja poslate poruke ==Pen new==.

!!!Tri vrste poruka

Pharo definiše nekoliko jendostavnih pravila za određivanje redosleda u kom se šalju poruke.
Ova pravila su zasnovana na pravljenju razlike između tri različite vrste poruka:
-''Unarne poruke'' su poruke koje se šalju objektu bez ikakvih dodatnih informacija u vidu argumenata. Na primer, u  ==3 factorial==, ==factorial== je unarna poruka. Poslate unarne poruke mogu izvršavati osnovne unarne operacije ili proizvoljne funkcionalnosti, ali uvek zadovoljavaju kriterijum da se šalju bez argumenata.
-''Binarne poruke'' su poruke koje predstavljaju osnovne binarne operacije (često aritmetičke).
One su binarne jer uvek obuhvataju tačno dva objekta: primaoca i objekat koji je argument. Na primer u  ==10 + 20==, ==+== je binarna poruka poslata primaocu ==10== sa argumentom ==20==.
-''Poruke sa ključnim rečima'' su poruke koje se sastoje od jedne ili više ključnih reči, od kojih se svaka završava dvotačkom (==:==) i uzima jedan argument. NA primer u ==anArray at: 1 put: 10==, ključna reč ==at:== uzima argument ==1==, a ključna reč ==put:== uzima argument ==10==.

Bitno je uočiti sledeće:
- Ne postoje poruke sa ključnim rečima koje se šalju bez argumenata. Sve poruke koje se šalju bez argumenata su unarne poruke.
- Postoji razlika između poruka sa ključnim rečima koje se šalju sa tačno jednim argumentom i binarnih poruka - poslata poruka sa ključnim rečima može izvršiti proizvoljnu funkcionalnost.


!!!!Unarne poruke

Unarne poruke su poruke koje ne zahtevaju ni jedan argument.
One prate sintaksni obrazac: ==primaoc imePoruke==.
Selektor je sastavljen jednostavno od niza karaktera koji ne sadrže ==:== (na primer, ==factorial==, ==open==, ==class==).

[[[example=true
89 sin
>>> 0.860069405812453
]]]

[[[example=true
3 sqrt
>>> 1.732050807568877
]]]

[[[example=true
Float pi
>>> 3.141592653589793
]]]

[[[example=true
'blop' size
>>> 4
]]]

[[[example=true
true not
>>> false
]]]

[[[example=true
Object class 
>>> Object class  "Klasa objekta Object je Object class (BENG)"
]]]

@@vazno Unarne poruke prate sintaksni obrazac: primaoc ""selektor"".

!!!!Binarne poruke

Binarne poruke su poruke koje zahtevaju tačno jedan argument ''i'' i čiji se selektor sastoji od niza jednog ili više karaktera iz sledećeg skupa: ==\+==, ==\-==, ==\*==, ==\/==, ==\&==, ==\===, ==\>==, ==\|==, ==\<==, ==\~==, i ==\@==.
Napominjemo da ==\-\-== nij edozvoljeno iz razloga koji su u vezi sa parsiranjem.

[[[example=true
100@100
>>> 100@100  "kreira Point objekat"
]]]

[[[example=true
3 + 4
>>> 7
]]]

[[[example=true
10 - 1
>>> 9
]]]

[[[example=true
4 <= 3
>>> false
]]]

[[[example=true
(4/3) * 3 == 4  
>>> true  "jednakost je samo binarna poruka, a razlomci su autentični"
]]]

[[[example=true
(3/4) == (3/4) 
>>> false  "dva jednaka razlomka nisu isti objekat"
]]]

@@vazno Binarne poruke prate sintaksni obrazac: primaoc ""selektor"" argument.

!!!!Poruke sa ključnim rečima

Poruke sa ključnim rečima su poruke koje zahtevaju jadan ili više argumenata i čiji se selektor sastoji od jedne ili više ključnih reči od kojih se svaka završava sa  ==\:==.

U primeru koji sledi, poruka ==between:and:== je sastavljena od dve ključne reči: ==between:== i ==and:==. Kompletna poruka ==between:and:== se šalje broju.

[[[example=true
2 between: 0 and: 10
>>> true
]]]

Svaka ključna reč uzima jedan argument. Stoga, ==r:g:b:== je poruka sa tri argumenta, ==playFileNamed:== i ==at:== su poruke sa jednim argumentom, a ==at:put:== je poruka sa dva argumenta. Za kreiranje instance klase ==Color== može se poslati poruka ==r:g:b:== kao u slanju poruke ==Color r: 1 g: 0 b: 0==, koje kreira crvenu boju. Važno je uočiti da su dvotačke deo selektora.

[[[example=true
Color r: 1 g: 0 b: 0
>>> Color red  "kreira novu boju"
]]]


U konvencionalnoj sintaksi, slanje poruke ==Color r: 1 g: 0 b: 0== u Pharo-u  odgovaralo bi pozivu metoda zapisanom kao ==Color.rgb(1,0,0)==.

[[[example=true
1 to: 10
>>> (1 to: 10)  "kreira interval"
]]]


[[[example=true
| nums |
nums := Array newFrom: (1 to: 5).
nums at: 1 put: 6.
nums
>>> #(6 2 3 4 5)
]]]

@@vazno Poruke sa ključnim rečima prate sintaksni obrazac: 
primaoc ""selektorReč1:"" argument1 ""Reč2:"" argument2 ... ""RečN:"" argumentN

!!!Komponovanje poruka

Svaka od tri vrste poruka ima razi;it prioritet, što omogućava da se poruke komponuju na elegantan način.
- Unarne poruke se uvek prve šalju, zatim binarne i konačno poruke sa ključnim rečima.
- Poruke u zagradama imaju prioritet u odnosu na sve druge poruke.
- Poruke iste vrste i preioriteta se izračunavaju s leva na desno.

Ova pravila dovode do veoma prirodnog redosleda čitanja.
Ako želite da budete sigurni da će vaše poruke biti poslate u redosledu koji vi želite, uvek možete dodati zagradekao što je prikazano na slici *@fig:uKeyUn*.
Na slici, poruka ==yellow== je unarna poruka, a poruka ==color:== je poruka s aključnim rečima, zato se prvo šalje poruka ==Color yellow==.
Pored toga, kako se poruke u zagradama šalju prve, dodavanjem (nepotrebnih) zagrada oko ==Color yellow== samo ističe da će se ovo slanje poruke prvo dogoditi.
Ostatak sekcije ilustruje ove navode.

+Unarna poruka ==Color yellow== se prva šalje. Ovo vraća color objekat koji se, kao argument, prosleđuje poruci aPen color:.>/figures/uKeyUn.png|label=fig:uKeyUn+


!!!!Unarne poruke > Binarne poruke > Poruke sa ključnim rečima

Unarne poruke imaju viši prioritet od ostalih vrsta poruka. Tako, unarne poruke se uvek prve šalju, zatim binarne i konačno poruke sa ključnim rečima. 

@@vazno ==Unarne poruke > Binarne poruke > Poruke sa ključnim rečima==

Kao što naredni primeri pokazuju, pravila sintakse Pharo-a uopšteno obezbedjuju da se slanje poruka može čitati na prirodan način:
[[[example=true
1000 factorial / 999 factorial 
>>> 1000
]]]

[[[example=true
2 raisedTo: 1 + 3 factorial
>>> 128
]]]


Nažalost, ova pravila su previše jednostavna za slanje aritmetičkih poruka, pa je neophodno uvesti zagrade kad god je potrebno nametnuti prioritet za binarne operatore.
[[[example=true
1 + 2 * 3
>>> 9
]]]

[[[example=true
1 + (2 * 3)
>>> 7
]]]

Naredni primer, koji je nešto složeniji (!), pruža lepu ilustraciju da se čak i komplikovani izrazi  mogu čitati na prirodan način.

[[[
[:aClass | aClass methodDict keys select: [:aMethod | (aClass>>aMethod) isAbstract ]] value: Boolean 
>>> an IdentitySet(#or: #| #and: #& #ifTrue: #ifTrue:ifFalse: #ifFalse: #not #ifFalse:ifTrue:)
]]]

Ovde želimo da znamo koji metodi klase ==Boolean== class su apstraktni.
@@todo fusnota? 
Zapravo, mogli smo ovo napisati ekvivalentnim ali jednostavnijim izrazom: ==Boolean methodDict select: #isAbstract thenCollect: #selector==. 
Pitamo neku klasu u argumentu, ==aClass==, za ključeve iz njenog rečnika metoda, i selektujemo metode date klase koji su apstraktni. 
Zatim vezujemo argument ==aClass== za konkretnu vrednost ==Boolean==. 
Zagrade su nam potrebne samo za slanje binarne poruke ==\>\>==, koja selektuje metode klase, pre slanja unarne poruke ==isAbstract== metodu. Rezultat nam pokazuje koji metodi moraju biti implementirani u konkretnim klasama ==True== i ==False== koje su podklase klase ==Boolean==.

!!!!!!Primer.

U slanju poruke ==aPen color: Color yellow==, imamo jednu ''unarnu'' poruku ==yellow== poslatu klasi ==Color== i jednu ''poruku sa ključnim rečima'' ==color:== poslatu objektu ==aPen==.
Unarne poruke se šalju prve pa s eprvo šalje ==Color yellow== (1).
Ovo vraća objekat color koji se prosleđuje kao argument poruke u ==aPen color: aColor== (2).
Slika *@fig:uKeyUn* prikazuje grafički kako se poruke šalju.

[[[
Dekomponovanje izvršavanja slanja poruke aPen color: Color yellow
		aPen color: Color yellow
(1)         Color yellow         "unarne poruke se se šalju prve"
               >>> aColor
(2)         aPen color: aColor   "poruka sa ključnim rečima se šalje sledeća"
]]]

!!!!!!Primer.
 U slanju poruke ==aPen go: 100 + 20==, imamo ''binarnu'' poruku ==\+ 20== i 'poruku sa ključnim rečima''  ==go:==. Binarne poruke se šalju pre poruka s aključnim rečima te je ==100 + 20== poslato prvo (1): poruka ==\+ 20== je poslata objektu ==100== što vraća ==120==. Zatim se šalje poruka ==aPen go: 120== sa argumentom ==120== (2). Naredni primer prikazuje redosled izvršavanja ovog slanja poruke.

[[[ Dekomponovanje izvršavanja slanja poruke aPen go: 100 + 20
		aPen go: 100 + 20
(1)         100 + 20         "prvo bnarna poruka"
               >>>   120
(2)     aPen go: 120         "zatim poruka sa ključnim rečima"

]]]


+Binarne poruke se šalju pre poruka sa ključnim rečima>file://figures/uKeyBin.png|lable=fig:uKeyBin|width=35+

+Dekomponovanje izvršavanja Pen new go: 100 \+ 20>file://figures/uunKeyBin.png|label=fig:uunKeyBin|width=40+


!!!!!!Example.
 Ostavljamo vam,  kao vežbu, da dekomponujete  izvršavanje slanja poruke ==Pen new go: 100 + 20== koja je komponovana od jedne unarne, jedne binarne i jedne poruke sa ključnim rečima (see Figure *@fig:uunKeyBin*).


!!!!Parentheses first
Parenthesised messages are sent prior to other messages.

@@vazno (Msg) > Unary > Binary > Keyword

Here are some examples. The first example shows that parentheses are not needed when the order is the one we want. 
Here we compute tangent of 1.5, then we round it and convert it as a string.

[[[example=true
1.5 tan rounded asString = (((1.5 tan) rounded) asString) 
>>> true
]]]

The second example shows that ==factorial== is executed prior to the sum and if we want to first perform the sum of 3 and 4 we should use parentheses as shown below.
[[[example=true
3 + 4 factorial
>>> 27    "(not 5040)"
]]]

[[[example=true
(3 + 4) factorial
>>> 5040
]]]

Similarly in the following example, we need the parentheses to force sending ==lowMajorScaleOn:== before ==play==.

[[[
(FMSound lowMajorScaleOn: FMSound clarinet) play
"(1) send the message clarinet to the FMSound class to create a clarinet sound.
 (2) send this sound to FMSound as argument to the lowMajorScaleOn: keyword message.
 (3) play the resulting sound."
]]]

!!!!!!Example.
The message ==(65@325 extent: 134@100) center== returns the center of a rectangle whose top left point is (65, 325) and whose size is 134*100. The following example shows how the message is decomposed and sent. First the message between parentheses is sent: it contains two binary messages ==65@325== and ==134@100== that are sent first and return points, and a keyword message ==extent:== which is then sent and returns a rectangle. Finally the unary message ==center== is sent to the rectangle and a point is returned. Evaluating the message without parentheses would lead to an error because the object ==100== does not understand the message ==center==.



[[[
Example of Parentheses.
      (65@325 extent: 134@100) center
(1)   65@325                                                    "binary"
    >>> aPoint
(2)                                134@100                     "binary"
                                 >>> anotherPoint
(3)   aPoint extent: anotherPoint                       "keyword"
      >>> aRectangle
(4)   aRectangle center                                     "unary"
      >>> 132@375
]]]

!!!!From left to right
Now we know how messages of different kinds or priorities are handled. The final question to be addressed is how messages with the same priority are sent. They are sent from the left to the right. Note that you already saw this behaviour in  the previous example where the two point creation messages (==\@==) were sent first as shown in Figure *@fig:unaryMessages*.

+Decomposing Pen new down.>file://figures/ucompoUn.png|label=fig:unaryMessages|width=60+


@@important When the messages are of the same kind, the order of execution is from left to right.

!!!!!!Example.
In the message sends ==Pen new down== all messages are unary messages, so the leftmost one, ==Pen new==, is sent first. This returns a newly created pen to which the second message ==down== is sent, as shown in Figure *@fig:unaryMessages*.

!!!!Arithmetic inconsistencies
The message composition rules are simple but they result in inconsistency for the execution of arithmetic message sends expressed in terms of binary messages. 
Here we see the common situations where extra parentheses are needed.


[[[
3 + 4 * 5
>>> 35    "(not 23)  Binary messages sent from left to right"
]]]

[[[example=true
3 + (4 * 5)
>>> 23
]]]

[[[example=true
1 + 1/3
>>> (2/3)    "and not 4/3"
]]]

[[[example=true
1 + (1/3)
>>> (4/3)
]]]

[[[example=true
1/3 + 2/3       
>>> (7/9)    "and not 1"
]]]

[[[example=true
(1/3) + (2/3)
>>> 1
]]]

!!!!!!Example.
In the message sends ==20 \+ 2 \* 5==, there are only binary messages ==\+== and ==\*==. However in \st there is no specific priority for the operations ==\+== and ==\*==. They are just binary messages, hence ==\*== does not have priority over ==\+==. Here the leftmost message ==\+== is sent first (1) and then the ==\*== is sent to the result as shown in below.

[[[Decomposing 20 + 2 * 5
"As there is no priority among binary messages, the leftmost message + is evaluated first even if by the rules of arithmetic the * should be sent first."

     20 + 2 * 5
(1)  20 + 2 >>> 22
(2)  22       * 5 >>> 110

]]]

+Default execution order.>file://figures/ucompoNoBracketPar.png|width=55+


As shown in the previous example the result of this message send is not ==30== but ==110==. This result is perhaps unexpected but follows directly from the rules used to send messages. This is the price to pay for the simplicity of the \st model. To get the correct result, we should use parentheses. When messages are enclosed in parentheses, they are evaluated first. Hence the message send ==20 \+ (2 \* 5)== returns the result as shown.

[[[
Decomposing 20 + (2 * 5)
"The messages surrounded by parentheses are evaluated first therefore * is sent prior to + which produces the correct behaviour."

    20 + (2 * 5)
(1)        (2 * 5) >>> 10
(2) 20 + 10      >>> 30
]]]


+Changing default execution order using parentheses.>file://figures/ucompoNumberBracket.png|width=55+

@@important In Pharo, arithmetic operators such as ==\+== and ==\*== do not have different priority. ==\+== and ==\*== are just binary messages, therefore ==\*== does not have priority over ==\+==. Use parentheses to obtain the desired result.

+Equivalent messages using parentheses.>file://figures/uKeyUnBinPar.png|width=80+

+Equivalent messages using parentheses.>file://figures/uunKeyBinPar.png|width=80+

""Table : Message sends and their fully parenthesized equivalents""

|!Implicit precedence |!Explicitly parenthesized equivalent
|aPen color: Color yellow | aPen color: (Color yellow)
| aPen go: 100 \+ 20= | Pen go: (100 \+ 20)
| aPen penSize: aPen penSize \+ 2 | aPen penSize: ((aPen penSize) \+ 2)
| 2 factorial \+ 4 | (2 factorial) \+ 4

Note that the first rule stating that unary messages are sent prior to binary and keyword messages avoids the need to put explicit parentheses around them. Table above shows message sends written following the rules and equivalent message sends if the rules would not exist. Both message sends result in the same effect or return the same value.

!!!Hints for identifying keyword messages

Often beginners have problems understanding when they need to add parentheses.
Let's see how keywords messages are recognized by the compiler.

!!!!Parentheses or not?

The characters \[, \], \( and \) delimit distinct areas. Within such an area, a keyword message is the longest sequence of words terminated  by ==\:== that is not cut by the characters ==\.==,  or ==\;==. When the characters ==\[== and  ==\]==, ==\(== and ==\)== surround some words with colons, these words participate in the keyword message ''local'' to the area defined.

In this example, there are two distinct keyword messages:  ==rotatedBy:magnify:smoothing:== and ==at:put:==.

[[[
aDict
   at: (rotatingForm
          rotateBy: angle
          magnify: 2
          smoothing: 1)
   put: 3
]]]

!!!!!!Hints.
If you have problems with these precedence rules, you may start simply by putting parentheses whenever you want to distinguish two messages having the same precedence.

The following piece of code does not require parentheses because the message send  ==x isNil== is unary hence is sent prior to the keyword message ==ifTrue:==.
[[[
(x isNil)
   ifTrue:[...]
]]]

The following piece of code requires parentheses because the messages ==includes:== and ==ifTrue:== are both keyword messages.
[[[
ord := OrderedCollection new.
(ord includes: $a)
   ifTrue:[...]
]]]

Without parentheses the unknown message ==includes:ifTrue:== would be sent to the collection!

!!!!When to use \[ \] or \( \)

You may also have problems understanding when to use square brackets rather than parentheses.
The basic principle is that you should use ==\[\]== when you do not know how many times, potentially zero, an expression should be evaluated.
==\[expression\]== will create block closure (''i.e.'', an object) from ==expression==, which may be evaluated any number of times (possibly zero), depending on the context.
Here note that an expression can either be a message send, a variable, a literal, an assignment or a block.

Hence the conditional branches of ==ifTrue:== or ==ifTrue:ifFalse:== require blocks.
Following the same principle both the receiver and the argument of a ==whileTrue:== message require the use of square brackets since we do not know how many times either the receiver or the argument should be evaluated.

Parentheses, on the other hand, only affect the order of sending messages.
So in ==(expression)==, the ==expression== will ''always'' be evaluated exactly once.

[[[
[ x isReady ] whileTrue: [ y doSomething ]   "both the receiver and the argument must be blocks"
4 timesRepeat: [ Beeper beep ]                   "the argument is evaluated more than once, so must be a block"
(x isReady) ifTrue: [ y doSomething ]           "receiver is evaluated once, so is not a block"
]]]

!!!Expression sequences

Expressions (''i.e.'', message sends, assignments, ...) separated by periods are evaluated in sequence.Note that there is no period between a variable definition and the following expression.
The value of a sequence is the value of the last expression.
The values returned by all the expressions except the last one are ignored. Note that the period is a separator and not a terminator. Therefore a final period is optional.

[[[
| box |
box := 20@30 corner: 60@90.
box containsPoint: 40@50 
>>> true
]]]

!!!Cascaded messages

Pharo offers a way to send multiple messages to the same receiver using a semicolon (==\;==).
This is called the cascade in Pharo jargon.

Syntactically a cascade is represented as follows:

[[[
anExpression msg1 ; msg2 ; msg3
]]]

!!!!!!Examples. 
You can program in Pharo without using cascades. It just forces you to repeat the receiver of the message.
The following code snippets are equivalent:
[[[
Transcript show: 'Pharo is '.
Transcript show: 'fun '.
Transcript cr.
]]]

[[[
Transcript
   show: 'Pharo is';
   show: 'fun ';
   cr
]]]

Note that the object receiving the cascaded messages can itself be the result of a message send.
In fact the receiver of all the cascaded messages is the receiver of the first message involved in a cascade.
In the following example, the first cascaded message is ==setX:setY== since it is followed by a cascade.
The receiver of the cascaded message ==setX:setY:== is the newly created point resulting from the execution of ==Point new==, and ''not'' ==Point==.
The subsequent message ==isZero== is sent to that same receiver.

[[[example=true
Point new setX: 25 setY: 35; isZero
>>> false
]]]

!!!Chapter summary

- A message is always sent to an object named the ''receiver'' which may be the result of other message sends.
- Unary messages are messages that do not require any argument.\\ They are of the form of selector.
- Binary messages are messages that involve two objects, the receiver and another object ''and'' whose selector is composed of one or more characters from the following list: ==\+==, ==\-==, ==\*==, ==\/==, ==\|==, ==\&==, ==\===, ==\>==, ==\<==, ==\~==, and ==\@==. They are of the form: receiver ""selector"" argument
- Keyword messages are messages that involve more than one object and that contain at least one colon character (==\:==). They are of the form: receiver ""selectorWordOne:"" argumentOne ""wordTwo:"" argumentTwo
-""Rule One."" Unary messages are sent first, then binary messages, and finally keyword messages.
-""Rule Two."" Messages in parentheses are sent before any others.
-""Rule Three."" When the messages are of the same kind, the order of execution is from left to right.
- In Pharo, traditional arithmetic operators such as \+ and \* have the same priority. ==\+== and ==\*== are just binary messages, therefore ==\*== does not have priority over ==\+==. You must use parentheses to obtain a different result.
