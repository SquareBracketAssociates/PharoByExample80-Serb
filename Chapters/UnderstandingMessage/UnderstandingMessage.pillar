!!Razumevanje sintakse poruka
@chapterUnderstandingMessage
%stef did several passes

Iako je sintaksa poruka u Pharo-u ekstremno jednostavna, ona je nekonvencionalna i može zahtevati neko vreme za privikavanje na nju. 
Ovaj odeljak nudi neke smernice koje će vam pomoći da se priviknete na sintaksu za slanje poruka.
Ako se već osećate ugodno u vezi sa sintaksom, možete odlučiti da preskočite ovaj odeljak, ili da se na njega vratite kasnije.
Sintaksa Pharo-a je bliska Smalltalk-u, pa ona može biti bliska Smalltalk programerima.

!!!Identifikovanje poruka

U Pharo-u, izuzev sintaksnih elemenata navedenih u Odeljku *@chapterSyntaxNutshell* (\:= ^ . ; # () {} [ : | ]), sve je slanje poruke.
Moguće je definisati operatore kao što su ==\+== za svoje klase, ali svi operatori imaju isti prioritet.
Pored toga, nije moguće promeniti arnost metoda. "-" je uvek binarna poruka; ne postoji način da dobijemo unarni "==\-=="  različitim "overloading"-om.

U Pharo-u, redosled u kome se poruke salju određen je ''vrstom'' poruke.
Postoje tri vrste poruka: ''unarne'', ''binarne'', i ''poruke sa ključnim rečima''.
Unarne poruke se prve šalju, zatim binarne poruke i na kraju poruke sa ključnim rečima.
Kao i u većini jezika, zagrade se koriste za promenu redosleda izvršavanja.
Ova pravila čine Pharo kod što je moguće jednostavnijim za čitanje, dok u većini slučajeva nije potrebno razmišljati o pravilima.

Kako se u Pharo-u sva izračunavanja obavljaju prosleđivanjem poruka, ispravno razumevanje poruka je krucijalno.
Sledeća terminologija će nam pomoći:

-Poruka se sastoji od ""selektora"" ("eng. selector") poruke i, opciono, iz argumenata.
-Poruka se šalje ""primaocu"" ("eng. receiver").
-Kombinacije poruke i njenog primaoca  se zove ''slanje poruke'' (eng. a message send) kao što je prikazano na slici *@fig:firstScriptMessage*.

+Dve slanja poruke koja se sastoje od primaoca, selektora metoda, i skupa argumenata.>file://figures/message.png|label=fig:firstScriptMessage|width=65+

Poruka se uvek šalje primaocu, koji može biti jedan literal, blok, promenljiva, ili rezultat evaluacije druge poruke.
Da bismo vam pomogli da prepoznate primaoca poruke, mi ćemo ga podvući za vas. Takođe ćemo zaokružiti svako slanje poruke elipsom i numerisati slanja poruka počevši od prve koja će biti poslata da vam pomognemo da uočite redosled u kom su poruke poslate.

+Dve poruke: ==Color yellow== i ==aMorph color: Color yellow==.>/figures/uKeyUnOne.png|label=fig:ellipse|width=50+

Slika *@fig:ellipse* prikazuje dva slanja poruke, ==Color yellow== i ==aMorph color: Color yellow==, zbog toga imamo dve elipse. Slanje poruke ==Color yellow== se izvršava prvo te je stoga njegova elipsa numerisana sa ==1==.  Postoje dva primaoca: ==aMorph== koji prima poruku ==color: ...== i ==Color== koji prima poruku ==yellow==. Oba primaoca su podvučena.

Primaoc može biti prvi element poruke kao što je ==100== u slanju poruke ==100 + 200== ili ==Color== u slanju poruke ==Color yellow==. Pored toga, primaoc može biti rezultat slanja druge poruke. Na primer, u slanju poruke ==Pen new go: 100==, primaoc poruke ==go: 100== je objekat koji vraća poslata poruka ==Pen new==. U svakom slučaju, poruka se šalje objektu koji se zove ''primaoc'' koji može biti rezultat slanja druge poruke.

|!Slanje poruke |!Tip poruke |!Rezultat
|==Color yellow== | unarna | daje žutu boju .
|==aPen  go: 100== | sa ključnim rečima | pomera olovku napred za 100 piksela.
|==100 + 20== | binarna |  100 se uvećava za 20
|==Browser open== | unarna | otvara se novi brauzer.
|==Pen new  go: 100== | unarna i sa ključnim rečima |kreira olovku i pomera je napred za 100 piksela.
|					 | sa ključnim rečima |
|==aPen go: 100 + 20== | sa ključnim rečima i binarna | pomera olovku napred za 120 piksela.

Tabela prikazuje nekoliko primera slanja poruka. Treba primetiti nekoliko činjenica:
- Nemaju sve poslate poruke argumente. Unarne poruke kao što je ==open== dnemaju argumente.
- Poruke koje imaju jednu ključnu reč i binarne porukekao što su ==go: 100== i ==+ 20== svaka imaju po jedan argument.
- Šalju se pojedinačne i složene poruke. ==Color yellow== i ==100 + 20== su pojedinačne:  poruka se šalje objektu, dok slanje poruke ==aPen go: 100 + 20== komponuje dve poruke: ==+ 20== se šalje objektu ==100==, a ==go:== se šalje objektu ==aPen== sa argumentomkoji je rezultat prve poslate poruke. 
- Primalac može biti izraz koji vraća objekat kao što su dodela, slanje poruke ili literal. U ==Pen new go: 100==, poruka ==go: 100== je poslata objektu koji je rezultat izvršavanja poslate poruke ==Pen new==.

!!!Three kinds of messages

Pharo defines a few simple rules to determine the order in which the messages are sent.
These rules are based on the distinction between 3 different kinds of messages:
-''Unary messages'' are messages that are sent to an object without any other information. For example in ==3 factorial==, ==factorial== is a unary message.
-''Binary messages'' are messages consisting of operators (often arithmetic).
They are binary because they always involve only two objects: the receiver and the argument object. For example in ==10 + 20==, ==+== is a binary message sent to the receiver ==10== with argument ==20==.
-''Keyword messages'' are messages consisting of one or more keywords, each ending with a colon (==:==) and taking an argument.  For example in ==anArray at: 1 put: 10==, the keyword ==at:== takes the argument ==1== and the keyword ==put:== takes the argument ==10==.

!!!!Unary messages

Unary messages are messages that do not require any argument.
They follow the syntactic template: ==receiver messageName==.
The selector is simply made up of a succession of characters not containing ==:== (''e.g.'', ==factorial==, ==open==, ==class==).

[[[example=true
89 sin
>>> 0.860069405812453
]]]

[[[example=true
3 sqrt
>>> 1.732050807568877
]]]

[[[example=true
Float pi
>>> 3.141592653589793
]]]

[[[example=true
'blop' size
>>> 4
]]]

[[[example=true
true not
>>> false
]]]

[[[example=true
Object class 
>>> Object class  "The class of Object is Object class (BANG)"
]]]

@@important Unary messages follow the syntactic template: receiver ""selector""

!!!!Binary messages

Binary messages are messages that require exactly one argument ''and'' whose selector consists of a sequence of one or more characters from the set: ==\+==, ==\-==, ==\*==, ==\/==, ==\&==, ==\===, ==\>==, ==\|==, ==\<==, ==\~==, and ==\@==.
Note that ==\-\-== is not allowed for parsing reasons.

[[[
100@100
>>> 100@100  "creates a Point object"
]]]

[[[example=true
3 + 4
>>> 7
]]]

[[[example=true
10 - 1
>>> 9
]]]

[[[example=true
4 <= 3
>>> false
]]]

[[[example=true
(4/3) * 3 == 4  
>>> true  "equality is just a binary message, and Fractions are exact"
]]]

[[[example=true
(3/4) == (3/4) 
>>> false  "two equal Fractions are not the same object"
]]]

@@important Binary messages follow the syntactic template: receiver ""selector"" argument

!!!!Keyword messages

Keyword messages are messages that require one or more arguments and whose selector consists of one or more keywords each ending in ==\:==.

The following message ==between:and:== is composed of two keywords: ==between:== and ==and:==. The full message is ==between:and:== and it is sent to number.

[[[example=true
2 between: 0 and: 10
>>> true
]]]

Each keyword takes an argument. Hence ==r:g:b:== is a method with three arguments, ==playFileNamed:== and ==at:== are methods with one argument, and ==at:put:== is a method with two arguments. To create an instance of the class ==Color== one can use the method ==r:g:b:== as in ==Color r: 1 g: 0 b: 0==, which creates the color red. Note that the colons are part of the selector.

[[[example=true
Color r: 1 g: 0 b: 0
>>> Color red  "creates a new color"
]]]


In Java or C++, the Pharo method invocation ==Color r: 1 g: 0 b: 0== would be written ==Color.rgb(1,0,0)==.

[[[example=true
1 to: 10
>>> (1 to: 10)  "creates an interval"
]]]


[[[
| nums |
nums := Array newFrom: (1 to: 5).
nums at: 1 put: 6.
nums
>>> #(6 2 3 4 5)
]]]

@@important Keyword messages follow the syntactic template: receiver ""selectorWordOne:"" argumentOne ""wordTwo:"" argumentTwo

!!!Message composition

The three kinds of messages each have different precedence, which allows them to be composed in an elegant way.

- Unary messages are always sent first, then binary messages and finally keyword messages.
- Messages in parentheses are sent prior to any kind of messages.
- Messages of the same kind are evaluated from left to right.

These rules lead to a very natural reading order.
Now if you want to be sure that your messages are sent in the order that you want you can always put more parentheses as shown in Figure *@fig:uKeyUn*.
In this  figure, the message ==yellow== is an unary message and the message ==color:== a keyword message, therefore the message send ==Color yellow== is sent first.
However as message sends in parentheses are sent first, putting (unnecessary) parentheses around ==Color yellow== just emphasizes that it will be sent first.
The rest of the section illustrates each of these points.

+Unary messages are sent first so Color yellow is sent. This returns a color object which is passed as argument of the message aPen color:.>/figures/uKeyUn.png|label=fig:uKeyUn+


!!!!Unary > Binary > Keywords
Unary messages are sent first, then binary messages, and finally keyword messages.
We also say that unary messages have a higher  priority over the other kinds of messages.

 Unary messages are sent first, then binary messages, and finally keyword based messages. ==Unary > Binary > Keyword==

As these examples show, Pharo's syntax rules generally ensure that message sends can be read in a natural way:
[[[
1000 factorial / 999 factorial 
>>> 1000
]]]

[[[example=true
2 raisedTo: 1 + 3 factorial
>>> 128
]]]


Unfortunately the rules are a bit too simplistic for arithmetic message sends, so you need to introduce parentheses whenever you want to impose a priority over binary operators:
[[[example=true
1 + 2 * 3
>>> 9
]]]

[[[example=true
1 + (2 * 3)
>>> 7
]]]

The following example, which is a bit more complex (!), offers a nice illustration that even complicated \st expressions can be read in a natural way:

[[[
[:aClass | aClass methodDict keys select: [:aMethod | (aClass>>aMethod) isAbstract ]] value: Boolean 
>>> an IdentitySet(#or: #| #and: #& #ifTrue: #ifTrue:ifFalse: #ifFalse: #not #ifFalse:ifTrue:)
]]]

Here we want to know which methods of the ==Boolean== class are abstract\footnote. 
In fact, we could also have written the equivalent but simpler expression: ==Boolean methodDict select: #isAbstract thenCollect: #selector==. 
We ask some argument class, ==aClass==, for the keys of its method dictionary, and select those methods of that class that are abstract. 
Then we bind the argument ==aClass== to the concrete value ==Boolean==. 
We need parentheses only to send the binary message ==\>\>==, which selects a method from a class, before sending the unary message ==isAbstract== to that method. The result shows us which methods must be implemented by ==Boolean=='s concrete subclasses ==True== and ==False==.

!!!!!!Example.

In the message ==aPen color: Color yellow==, there is one ''unary'' message ==yellow== sent to the class ==Color== and a ''keyword'' message ==color:== sent to ==aPen==.
Unary messages are sent first so the message send ==Color yellow== is sent (1).
This returns a color object which is passed as argument of the message ==aPen color: aColor== (2).
Figure *@fig:uKeyUn* shows graphically how messages are sent.

[[[
Decomposing the execution of aPen color: Color yellow
        aPen color: Color yellow
(1)                       Color yellow        "unary message is sent first"
                        >>> aColor
(2)   aPen color: aColor                 "keyword message is sent next"
]]]

!!!!!!Example.
 In the message ==aPen go: 100 + 20==, there is a ''binary'' message ==\+ 20== and a ''keyword'' message ==go:==. Binary messages are sent prior to keyword messages so ==100 + 20== is sent first (1): the message ==\+ 20== is sent to the object ==100== and returns the number ==120==. Then the message ==aPen go: 120== is sent with ==120== as argument (2). The following example shows how the message send is executed.

[[[ Decomposing aPen go: 100 + 20
      aPen go: 100 + 20
(1)                 100 + 20           "binary message first"
                   >>>   120
(2)  aPen go: 120                   "then keyword message"

]]]


+Binary messages are sent before keyword messages>file://figures/uKeyBin.png|lable=fig:uKeyBin|width=35+

+Decomposing Pen new go: 100 \+ 20>file://figures/uunKeyBin.png|label=fig:uunKeyBin|width=40+


!!!!!!Example.
 As an exercise we let you decompose the execution of the message ==Pen new go: 100 + 20== which is composed of one unary, one keyword and one binary message (see Figure *@fig:uunKeyBin*).

!!!!Parentheses first
Parenthesised messages are sent prior to other messages.

@@important (Msg) > Unary > Binary > Keyword

Here are some examples. The first example shows that parentheses are not needed when the order is the one we want. 
Here we compute tangent of 1.5, then we round it and convert it as a string.

[[[example=true
1.5 tan rounded asString = (((1.5 tan) rounded) asString) 
>>> true
]]]

The second example shows that ==factorial== is executed prior to the sum and if we want to first perform the sum of 3 and 4 we should use parentheses as shown below.
[[[example=true
3 + 4 factorial
>>> 27    "(not 5040)"
]]]

[[[example=true
(3 + 4) factorial
>>> 5040
]]]

Similarly in the following example, we need the parentheses to force sending ==lowMajorScaleOn:== before ==play==.

[[[
(FMSound lowMajorScaleOn: FMSound clarinet) play
"(1) send the message clarinet to the FMSound class to create a clarinet sound.
 (2) send this sound to FMSound as argument to the lowMajorScaleOn: keyword message.
 (3) play the resulting sound."
]]]

!!!!!!Example.
The message ==(65@325 extent: 134@100) center== returns the center of a rectangle whose top left point is (65, 325) and whose size is 134*100. The following example shows how the message is decomposed and sent. First the message between parentheses is sent: it contains two binary messages ==65@325== and ==134@100== that are sent first and return points, and a keyword message ==extent:== which is then sent and returns a rectangle. Finally the unary message ==center== is sent to the rectangle and a point is returned. Evaluating the message without parentheses would lead to an error because the object ==100== does not understand the message ==center==.



[[[
Example of Parentheses.
      (65@325 extent: 134@100) center
(1)   65@325                                                    "binary"
    >>> aPoint
(2)                                134@100                     "binary"
                                 >>> anotherPoint
(3)   aPoint extent: anotherPoint                       "keyword"
      >>> aRectangle
(4)   aRectangle center                                     "unary"
      >>> 132@375
]]]

!!!!From left to right
Now we know how messages of different kinds or priorities are handled. The final question to be addressed is how messages with the same priority are sent. They are sent from the left to the right. Note that you already saw this behaviour in  the previous example where the two point creation messages (==\@==) were sent first as shown in Figure *@fig:unaryMessages*.

+Decomposing Pen new down.>file://figures/ucompoUn.png|label=fig:unaryMessages|width=60+


@@important When the messages are of the same kind, the order of execution is from left to right.

!!!!!!Example.
In the message sends ==Pen new down== all messages are unary messages, so the leftmost one, ==Pen new==, is sent first. This returns a newly created pen to which the second message ==down== is sent, as shown in Figure *@fig:unaryMessages*.

!!!!Arithmetic inconsistencies
The message composition rules are simple but they result in inconsistency for the execution of arithmetic message sends expressed in terms of binary messages. 
Here we see the common situations where extra parentheses are needed.


[[[
3 + 4 * 5
>>> 35    "(not 23)  Binary messages sent from left to right"
]]]

[[[example=true
3 + (4 * 5)
>>> 23
]]]

[[[example=true
1 + 1/3
>>> (2/3)    "and not 4/3"
]]]

[[[example=true
1 + (1/3)
>>> (4/3)
]]]

[[[example=true
1/3 + 2/3       
>>> (7/9)    "and not 1"
]]]

[[[example=true
(1/3) + (2/3)
>>> 1
]]]

!!!!!!Example.
In the message sends ==20 \+ 2 \* 5==, there are only binary messages ==\+== and ==\*==. However in \st there is no specific priority for the operations ==\+== and ==\*==. They are just binary messages, hence ==\*== does not have priority over ==\+==. Here the leftmost message ==\+== is sent first (1) and then the ==\*== is sent to the result as shown in below.

[[[Decomposing 20 + 2 * 5
"As there is no priority among binary messages, the leftmost message + is evaluated first even if by the rules of arithmetic the * should be sent first."

     20 + 2 * 5
(1)  20 + 2 >>> 22
(2)  22       * 5 >>> 110

]]]

+Default execution order.>file://figures/ucompoNoBracketPar.png|width=55+


As shown in the previous example the result of this message send is not ==30== but ==110==. This result is perhaps unexpected but follows directly from the rules used to send messages. This is the price to pay for the simplicity of the \st model. To get the correct result, we should use parentheses. When messages are enclosed in parentheses, they are evaluated first. Hence the message send ==20 \+ (2 \* 5)== returns the result as shown.

[[[
Decomposing 20 + (2 * 5)
"The messages surrounded by parentheses are evaluated first therefore * is sent prior to + which produces the correct behaviour."

    20 + (2 * 5)
(1)        (2 * 5) >>> 10
(2) 20 + 10      >>> 30
]]]


+Changing default execution order using parentheses.>file://figures/ucompoNumberBracket.png|width=55+

@@important In Pharo, arithmetic operators such as ==\+== and ==\*== do not have different priority. ==\+== and ==\*== are just binary messages, therefore ==\*== does not have priority over ==\+==. Use parentheses to obtain the desired result.

+Equivalent messages using parentheses.>file://figures/uKeyUnBinPar.png|width=80+

+Equivalent messages using parentheses.>file://figures/uunKeyBinPar.png|width=80+

""Table : Message sends and their fully parenthesized equivalents""

|!Implicit precedence |!Explicitly parenthesized equivalent
|aPen color: Color yellow | aPen color: (Color yellow)
| aPen go: 100 \+ 20= | Pen go: (100 \+ 20)
| aPen penSize: aPen penSize \+ 2 | aPen penSize: ((aPen penSize) \+ 2)
| 2 factorial \+ 4 | (2 factorial) \+ 4

Note that the first rule stating that unary messages are sent prior to binary and keyword messages avoids the need to put explicit parentheses around them. Table above shows message sends written following the rules and equivalent message sends if the rules would not exist. Both message sends result in the same effect or return the same value.

!!!Hints for identifying keyword messages

Often beginners have problems understanding when they need to add parentheses.
Let's see how keywords messages are recognized by the compiler.

!!!!Parentheses or not?

The characters \[, \], \( and \) delimit distinct areas. Within such an area, a keyword message is the longest sequence of words terminated  by ==\:== that is not cut by the characters ==\.==,  or ==\;==. When the characters ==\[== and  ==\]==, ==\(== and ==\)== surround some words with colons, these words participate in the keyword message ''local'' to the area defined.

In this example, there are two distinct keyword messages:  ==rotatedBy:magnify:smoothing:== and ==at:put:==.

[[[
aDict
   at: (rotatingForm
          rotateBy: angle
          magnify: 2
          smoothing: 1)
   put: 3
]]]

!!!!!!Hints.
If you have problems with these precedence rules, you may start simply by putting parentheses whenever you want to distinguish two messages having the same precedence.

The following piece of code does not require parentheses because the message send  ==x isNil== is unary hence is sent prior to the keyword message ==ifTrue:==.
[[[
(x isNil)
   ifTrue:[...]
]]]

The following piece of code requires parentheses because the messages ==includes:== and ==ifTrue:== are both keyword messages.
[[[
ord := OrderedCollection new.
(ord includes: $a)
   ifTrue:[...]
]]]

Without parentheses the unknown message ==includes:ifTrue:== would be sent to the collection!

!!!!When to use \[ \] or \( \)

You may also have problems understanding when to use square brackets rather than parentheses.
The basic principle is that you should use ==\[\]== when you do not know how many times, potentially zero, an expression should be evaluated.
==\[expression\]== will create block closure (''i.e.'', an object) from ==expression==, which may be evaluated any number of times (possibly zero), depending on the context.
Here note that an expression can either be a message send, a variable, a literal, an assignment or a block.

Hence the conditional branches of ==ifTrue:== or ==ifTrue:ifFalse:== require blocks.
Following the same principle both the receiver and the argument of a ==whileTrue:== message require the use of square brackets since we do not know how many times either the receiver or the argument should be evaluated.

Parentheses, on the other hand, only affect the order of sending messages.
So in ==(expression)==, the ==expression== will ''always'' be evaluated exactly once.

[[[
[ x isReady ] whileTrue: [ y doSomething ]   "both the receiver and the argument must be blocks"
4 timesRepeat: [ Beeper beep ]                   "the argument is evaluated more than once, so must be a block"
(x isReady) ifTrue: [ y doSomething ]           "receiver is evaluated once, so is not a block"
]]]

!!!Expression sequences

Expressions (''i.e.'', message sends, assignments, ...) separated by periods are evaluated in sequence.Note that there is no period between a variable definition and the following expression.
The value of a sequence is the value of the last expression.
The values returned by all the expressions except the last one are ignored. Note that the period is a separator and not a terminator. Therefore a final period is optional.

[[[
| box |
box := 20@30 corner: 60@90.
box containsPoint: 40@50 
>>> true
]]]

!!!Cascaded messages

Pharo offers a way to send multiple messages to the same receiver using a semicolon (==\;==).
This is called the cascade in Pharo jargon.

Syntactically a cascade is represented as follows:

[[[
anExpression msg1 ; msg2 ; msg3
]]]

!!!!!!Examples. 
You can program in Pharo without using cascades. It just forces you to repeat the receiver of the message.
The following code snippets are equivalent:
[[[
Transcript show: 'Pharo is '.
Transcript show: 'fun '.
Transcript cr.
]]]

[[[
Transcript
   show: 'Pharo is';
   show: 'fun ';
   cr
]]]

Note that the object receiving the cascaded messages can itself be the result of a message send.
In fact the receiver of all the cascaded messages is the receiver of the first message involved in a cascade.
In the following example, the first cascaded message is ==setX:setY== since it is followed by a cascade.
The receiver of the cascaded message ==setX:setY:== is the newly created point resulting from the execution of ==Point new==, and ''not'' ==Point==.
The subsequent message ==isZero== is sent to that same receiver.

[[[example=true
Point new setX: 25 setY: 35; isZero
>>> false
]]]

!!!Chapter summary

- A message is always sent to an object named the ''receiver'' which may be the result of other message sends.
- Unary messages are messages that do not require any argument.\\ They are of the form of selector.
- Binary messages are messages that involve two objects, the receiver and another object ''and'' whose selector is composed of one or more characters from the following list: ==\+==, ==\-==, ==\*==, ==\/==, ==\|==, ==\&==, ==\===, ==\>==, ==\<==, ==\~==, and ==\@==. They are of the form: receiver ""selector"" argument
- Keyword messages are messages that involve more than one object and that contain at least one colon character (==\:==). They are of the form: receiver ""selectorWordOne:"" argumentOne ""wordTwo:"" argumentTwo
-""Rule One."" Unary messages are sent first, then binary messages, and finally keyword messages.
-""Rule Two."" Messages in parentheses are sent before any others.
-""Rule Three."" When the messages are of the same kind, the order of execution is from left to right.
- In Pharo, traditional arithmetic operators such as \+ and \* have the same priority. ==\+== and ==\*== are just binary messages, therefore ==\*== does not have priority over ==\+==. You must use parentheses to obtain a different result.
